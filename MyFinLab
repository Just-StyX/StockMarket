import re
import glob
import seaborn as sns
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

def finLab(folderName):
    #Reading all the csv files and collecting the Adj Close columns into one dataframe
    X = []
    all_files = glob.glob(folderName + "/*.csv")
    X.append(pd.read_csv(all_files[0], parse_dates=["Date"])[['Date']])
    for file in all_files:
        df = pd.read_csv(file)
        name = re.split('; |, |/|.csv',file)
        df[name[1]] = df[["Adj Close"]]
        X.append(df[name[1]])
    frame = pd.concat(X, axis=1, ignore_index=False).set_index('Date')
    return frame

def plotofPriceandReturn(folderName):
    frame = finLab(folderName)
    
    #plot of the stock prices
    plt.figure(figsize=(8,5))
    sns.lineplot(data=frame)
    plt.title("Monthly Prices of Various Stocks")
    
     #Computing and plotting returns
    Returns = frame.pct_change()
    ax = plt.figure(figsize=(8,5))
    sns.lineplot(data=Returns)
    plt.title("Monthly Returns of Various Stocks")

def annualMean_volatility(folderName):
    #Computing the average return and volatility of each stock and displaying the plot between the volatilities and the average returns
    frame = finLab(folderName)
    Returns = frame.pct_change()
    annualMeans = 12*(Returns.mean())
    annualVolatility = np.sqrt(12)*(Returns.std())
    df = pd.concat([annualVolatility, annualMeans], axis=1).reset_index()
    df = df.rename(columns={"index" : "Stock", 0: "annualVolatility", 1: "annualMeans"})
    print(df)
    sns.scatterplot(data=df, x= "annualVolatility", y = "annualMeans")
    plt.title("Volatility vs Returns")
    for i in range(df.shape[0]):
        plt.text(x=df.annualVolatility[i],y=df.annualMeans[i],s=df.Stock[i],fontdict=dict(color='red',size=10))#,bbox=dict(facecolor='yellow',alpha=0.5))
        plt.show()
    
    #Computing the mean and comparing with the average returns
    Equally = Returns
    Equally["Equally Weighted"] = Equally.mean(axis=1)
    Annual_Mean = 12*Equally[["Equally Weighted"]].mean()
    Annual_Volatility = np.sqrt(12)*Equally[["Equally Weighted"]].std()
    GrandMean = annualMeans.mean() 
    GrandVolatility = annualVolatility.std()
    
    diff1 = Annual_Mean - GrandMean
    diff2 = Annual_Volatility - GrandVolatility
    return diff1, diff2 
